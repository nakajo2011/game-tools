{"version":3,"sources":["right_menu/DeckSettings.tsx","right_menu/DeckInfos.tsx","right_menu/RightMenu.tsx","modules/SimpleCardDrawModule.ts","main_screen/Deck.tsx","main_screen/MainScreen.tsx","App.tsx","serviceWorker.ts","RootReducer.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","width","fieldset","borderRadius","border","padding","DeckSettings","classes","className","noValidate","autoComplete","FormControl","component","FormLabel","TextField","id","label","type","size","defaultValue","FormHelperText","Button","variant","color","DeckInfos","Box","RightMenu","SimpleCardDrawModule","createSlice","name","initialState","reducers","increment","state","action","draw","actions","paper","position","textAlign","height","display","cardSheet","Deck","dispatch","useDispatch","deck","useSelector","cardsState","Container","fixed","num","top","papers","i","style","left","Paper","elevation","push","createDeck","cards","length","DECK_LEFT_POS","onClick","fontSize","lastCard","flexGrow","container","backgroundColor","palette","primary","light","deckField","borderColor","grey","A100","trashField","secondary","handField","MainScreen","Grid","xs","item","offset","mixins","toolbar","text","App","Fragment","AppBar","Toolbar","Typography","Boolean","window","location","hostname","match","RootReducer","combineReducers","reducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40381e9c.chunk.js","sourcesContent":["import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {FormControl, FormLabel, FormHelperText, Button} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    width: \"40%\",\n  },\n  fieldset: {\n    borderRadius: \"10px\",\n    border: \"1px solid\",\n    padding: \"8px\",\n    width: \"100%\",\n  },\n}));\n\nexport default function DeckSettings() {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <FormControl component='fieldset' className={classes.fieldset}>\n        <FormLabel component='legend'>デッキセッティング</FormLabel>\n        <TextField id=\"standard-number-min\" className={classes.input} label=\"Min\" type=\"Number\" size=\"small\" defaultValue={1}/>\n        <FormHelperText>から</FormHelperText>\n        <TextField id=\"standard-number-max\" className={classes.input} label=\"Max\" type=\"Number\" size=\"small\" defaultValue={10}/>\n        <FormHelperText>までのカードを</FormHelperText>\n        <TextField id=\"standard-number-deck\" className={classes.input} label=\"Set\" type=\"Number\" size=\"small\" defaultValue={1}/>\n        <FormHelperText>セット持つデッキを作成</FormHelperText>\n        <Button variant=\"outlined\" color=\"primary\">作成</Button>\n      </FormControl>\n    </form>\n  );\n}","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {FormControl, FormLabel, Box} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    width: \"40%\",\n  },\n  fieldset: {\n    borderRadius: \"10px\",\n    border: \"1px solid\",\n    padding: \"8px\",\n    width: \"100%\",\n  },\n}));\n\nexport default function DeckInfos() {\n  const classes = useStyles();\n  return (\n    <FormControl component='fieldset' className={classes.fieldset}>\n      <FormLabel component='legend'>デッキ情報</FormLabel>\n      <Box>\n        残りのカード 8枚\n      </Box>\n      <Box>\n        手札カード 2枚\n      </Box>\n      <Box>\n        捨て札カード 0枚\n      </Box>\n    </FormControl>\n  );\n}","import React from 'react';\nimport DeckSettings from './DeckSettings';\nimport DeckInfos from './DeckInfos';\n\nexport default function RightMenu() {\n  return (\n    <div>\n      <DeckSettings/>\n      <DeckInfos/>\n    </div>\n  );\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype State = {\n  deck: number[],\n  hand: number[],\n  trash: number[]\n}\n\nconst getArray = (min: number, max: number) => {\n  return Array.from(Array(max - min).keys()).map(i => i+min)\n}\n\nexport function shuffle<T>(array: T[]) {\n  const out = Array.from(array);\n  for (let i = out.length - 1; i > 0; i--) {\n    const r = Math.floor(Math.random() * (i + 1));\n    const tmp = out[i];\n    out[i] = out[r];\n    out[r] = tmp;\n  }\n  return out;\n}\n\nconst init = () => {\n  let deck = shuffle(getArray(1, 10));\n\n  let result:State =  {\n    deck: deck,\n    hand: [],\n    trash: [],\n  }\n  return result;\n}\n// createSlice() で actions と reducers を一気に生成\nconst SimpleCardDrawModule = createSlice({\n  name: \"cardsState\",\n  initialState: 10,\n  reducers: {\n    increment: (state: number, action: PayloadAction<void>) => state + 1,\n    draw: (state: number, action: PayloadAction<void>) => state - 1\n  }\n});\n\nexport const {\n  increment, draw\n} = SimpleCardDrawModule.actions\n\nexport default SimpleCardDrawModule;","import React from 'react';\nimport {Container, Paper, Box} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from '../rootReducer'\nimport SimpleCardDrawModule from \"../modules/SimpleCardDrawModule\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    display: \"inline-block\",\n  },\n  cardSheet: {\n    position: \"relative\",\n    height: theme.spacing(32),\n  }\n}));\n\nconst DECK_START_TOP_POS = 100;\nconst DECK_LEFT_POS = 68;\nconst DIFF = 4;\n\nconst lastCardTop = (num: number) => DECK_START_TOP_POS - ((num - 1) * DIFF);\n\nconst createDeck = (num: number, classes: any) => {\n  let top = DECK_START_TOP_POS;\n  const left = DECK_LEFT_POS;\n  const papers = [];\n\n  for (let i = 0; i < num - 1; i++) {\n    const style = {top: top + \"px\", left: left + \"px\"};\n    const paper = (\n      <Paper className={classes.paper} style={style} elevation={2}/>\n    );\n    papers.push(paper);\n    top -= DIFF;\n  }\n  return (\n    <div>\n      {papers}\n    </div>\n  );\n};\n\nexport default function Deck() {\n  // dispatch の取得\n  const dispatch = useDispatch();\n  // state の取得\n  const deck: number[] = useSelector((state: RootState) => state.cardsState.deck)\n  const draw = () => dispatch(SimpleCardDrawModule.actions.draw());\n  const classes = useStyles();\n\n  const lastCard = () => {\n    if (deck.length > 0) {\n      return (\n        <Paper className={classes.paper} style={{top: lastCardTop(deck.length) + \"px\", left: DECK_LEFT_POS + \"px\"}}\n               elevation={2} onClick={() => draw()}>\n          <Box fontSize={32}>{deck.length}</Box>\n        </Paper>\n      );\n    }\n  };\n\n  return (\n    <Container fixed className={classes.cardSheet}>\n      {createDeck(cards.deck.length, classes)}\n      {lastCard()}\n    </Container>\n  );\n}\n","import React from 'react';\nimport {Container, FormHelperText, Grid} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Deck from './Deck';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    height: \"100%\",\n  },\n  paper: {\n    position: \"absolute\",\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    width: theme.spacing(8),\n    height: theme.spacing(8),\n    display: \"inline-block\",\n  },\n  container: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.primary.light,\n  },\n  deckField: {\n    borderRadius: \"10px\",\n    border: \"2px solid\",\n    borderColor: theme.palette.grey.A100,\n  },\n  trashField: {\n    borderRadius: \"10px\",\n    border: \"2px solid\",\n    borderColor: theme.palette.secondary.light,\n  },\n  handField: {\n    borderRadius: \"10px\",\n    border: \"2px solid\",\n    borderColor: theme.palette.primary.light,\n    height: \"40%\",\n  },\n}));\n\nexport default function MainScreen() {\n\n  const classes = useStyles();\n  return (\n    <Container fixed className={classes.root}>\n      <Grid container xs={12} spacing={1}>\n        <Grid item xs={4}>\n          <Container component=\"fieldset\" className={classes.deckField}>\n            <FormHelperText component=\"legend\">山札フィールド</FormHelperText>\n            <Deck/>\n          </Container>\n        </Grid>\n        <Grid item xs={8}>\n          <Container component=\"fieldset\" className={classes.trashField}>\n            <FormHelperText component=\"legend\">捨て札フィールド</FormHelperText>\n          </Container>\n        </Grid>\n      </Grid>\n      <div style={{padding: \"8px 0 0 0\"}}/>\n      <Container component=\"fieldset\" className={classes.handField}>\n        <FormHelperText component=\"legend\">手札フィールド</FormHelperText></Container>\n    </Container>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport {AppBar, Toolbar, Typography, Container} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport RightMenu from './right_menu/RightMenu';\nimport MainScreen from './main_screen/MainScreen';\n\nconst useStyles = makeStyles((theme) => ({\n  offset: theme.mixins.toolbar,\n\n  root: {\n    flexGrow: 1,\n    height: \"100vh\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h4\" color=\"inherit\">\n            Game Tools\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.offset} />\n      <Container fixed className={classes.root}>\n        <div>\n          <Grid container spacing={1}>\n            <Grid item xs={9}>\n              <MainScreen/>\n            </Grid>\n            <Grid item xs={3}>\n              <Container color=\"secondary\">\n                <RightMenu/>\n              </Container>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport SimpleCardDrawModule from './modules/SimpleCardDrawModule';\n\nconst RootReducer = combineReducers({\n  cardsState: SimpleCardDrawModule.reducer\n});\n\nexport type RootState = ReturnType<typeof RootReducer>;\nexport default RootReducer;","import { configureStore } from '@reduxjs/toolkit'\nimport RootReducer from './RootReducer'\n\nconst store = configureStore({\n  reducer: RootReducer\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store  from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}